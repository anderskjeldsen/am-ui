
namespace Am.Ui 
{
    class Border(
        var left: Short,
        var top: Short,
        var right: Short,
        var bottom: Short,
    ) {
        import Am.Lang

    }

    class Padding (
        var left: Short,
        var top: Short,
        var right: Short,
        var bottom: Short,
    ) {
        import Am.Lang

    }


    native class Window {
        import Am.Lang

        private var rootView: View
        private var x: Short
        private var y: Short
        private var width: UShort
        private var height: UShort
        private var screen: Screen
        private var viewContext: ViewContextImpl
        private var graphics: ViewContextGraphics
        private var refreshRequested: Bool
//        private var graphics: Weak<ViewContextGraphics> = new Weak<ViewContextGraphics>()
        private var border: Border
        private var backgroundPen: UByte
        prviate var fillBackground: Bool
        
        var font: Font

        fun getRootView(): View {
            return this.rootView
        }

        private fun setBorder(left: Short, top: Short, right: Short, bottom: Short) {
            this.border = new Border(left, top, right, bottom)
        }

        fun setRootView(view: View) {
            if (this.rootView == view) {
                return
            }
            if(this.rootView != null) {
                this.rootView.onDetach()
            }
            this.rootView = view
            if (view != null) {
                "onAttach...".println()
                view.onAttach(this.viewContext)
            }
        }

        static fun openWindow(x: Short, y: Short, width: UShort, height: UShort, screen: Screen, windowManager: WindowManager): Window {
            var w = new Window()
            var vc = new ViewContextImpl()
            vc.setWindow(w)
            w.viewContext = vc
            var graphics = new ViewContextGraphics(vc)
            w.graphics = graphics
//            vc.setGraphics(graphics)
            w.x = x
            w.y = y
            w.fillBackground = true
            w.border = new Border(0S, 0S, 0S, 0S)
            w.width = width
            w.height = height
            w.screen = screen
            w.open(x, y, width, height, screen, windowManager)
            return w
        }

        fun requestRefresh() {
            this.refreshRequested = true
        }

        fun attemptRefresh() {
            if (this.refreshRequested) {
                this.refreshRequested = false
                "Win refresh".println()
                this.paint()
//                this.refresh()
            }
        }

        private fun paint() {
            "paint".println()
            if (this.rootView != null) {
                var graphics = this.getGraphics()
//                ("X offset: " + this.graphics.xOffset.toString()).println()
                if (this.fillBackground) {
                    graphics.setForegroundPen(this.backgroundPen)
                    graphics.fillRect(0S + this.border.left, 0S + this.border.top, this.width.toShort() - (1S + this.border.right), this.height.toShort() - (1S + this.border.bottom))
                }
                if (this.font != null) {
                    graphics.setFont(this.font)
                }
                this.rootView.paintAll(graphics)
            }
        }

        private fun onResize(x: Short, y: Short, width: UShort, height: UShort) {
            this.x = x
            this.y = y
            this.width = width
            this.height = height
            this.layout()
            this.paint()
        }

        fun layout() {
            "layout 1".println()
            if (this.rootView != null) {
                "layout 2".println()

                var b = this.border
                "layout 3".println()

//                ("border top" + b.top.toString()).println()
                ("Win size: " + this.width.toString() + " x " + this.height.toString()).println()
                this.rootView.layout(b.left, b.top, this.width - (b.left + b.right).toUShort(), this.height - (b.top + b.bottom).toUShort())
            }
        }

        fun onCloseButtonClick() {
            this.close()
        }

        fun onMouseClick(button: UByte, x: Short, y: Short) {
//            var lx = this.border.left
            ("Window click: " + button.toString() + " " + x.toString() + " " + y.toString()).println()
            this.rootView?.onMouseClick(button, x - this.border.left, y - this.border.top)
        }

        fun calculateStringWidth(font: Font, text: String): UShort {
            var graphics = this.getGraphics()
            if (font != null) {                
                graphics.setFont(font)
            }
            return graphics.calculateStringWidth(text)
        }

        fun getCurrentFontSize(): UByte {
            var graphics = this.getGraphics()
            if (graphics == null) {
                throw new Exception("Graphics is null")
            }
            return graphics.getCurrentFontSize()
        }

        private fun getGraphics(): ViewContextGraphics  {
            return this.graphics
//            return this.viewContext.getGraphics()
        }

        native fun handleInput()
        native fun isOpen(): Bool
        private native fun refresh()

        private native fun open(x: Short, y: Short, width: UShort, height: UShort, screen: Screen, windowManager: WindowManager)
        native fun close()
        fun dispose() {
            this.viewContext = null
            this.graphics = null
        }
    }
}

