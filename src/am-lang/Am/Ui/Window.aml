
namespace Am.Ui 
{
    native class Window {
        import Am.Lang

        private var rootView: View
        private var x: Short
        private var y: Short
        private var width: UShort
        private var height: UShort
        private var screen: Screen
        private var viewContext: ViewContextImpl
        private var graphics: ViewContextGraphics
        private var repaintRequested: Bool
        private var border: Insets
        private var backgroundPen: UByte
        private var fillBackground: Bool
        private var pixelScaleX: UByte
        private var pixelScaleY: UByte
        private var pixelMetrics: PixelMetrics

        var font: Font

        fun getRootView(): View {
            return this.rootView
        }

        private fun setBorder(left: Short, top: Short, right: Short, bottom: Short) {
            this.border = new Insets(left, top, right, bottom)
        }

        fun setRootView(view: View) {
            if (this.rootView == view) {
                return
            }
            if(this.rootView != null) {
                this.rootView.onDetach()
            }
            this.rootView = view
            if (view != null) {
//                "onAttach...".println()
                view.onAttach(this.viewContext)
            }
        }

        static fun openWindow(x: Short, y: Short, width: UShort, height: UShort, screen: Screen, windowManager: WindowManager): Window {
            var w = new Window()
            var vc = new ViewContextImpl()
            vc.setWindow(w)
            w.viewContext = vc
            var graphics = new ViewContextGraphics(vc)
            w.graphics = graphics
//            vc.setGraphics(graphics)
            w.x = x
            w.y = y
            w.fillBackground = true
            w.border = new Insets(0S, 0S, 0S, 0S)
            w.width = width
            w.height = height
            w.screen = screen
            w.open(x, y, width, height, screen, windowManager)
            return w
        }

        fun requestRepaint() {
            var b = this.repaintRequested
            if (!b) {
                this.repaintRequested = true
                this.refresh()
            }
        }
/*
        fun repaint() {
            this.paint()
//            this.repaintRequested = false
        }
        */

        private fun paint() {
            var graphics = this.getGraphics()
            graphics.requestRepaintAll()
            if (this.rootView != null) {
//                ("X offset: " + this.graphics.xOffset.toString()).println()
//                if (this.repaintRequested) {
                    if (this.fillBackground) {
                        graphics.setForegroundPen(this.backgroundPen)
                        graphics.fillRect(0S + this.border.left, 0S + this.border.top, this.width.toShort() - (1S + this.border.right), this.height.toShort() - (1S + this.border.bottom))
                    }
//                }
                if (this.font != null) {
                    graphics.setFont(this.font)
                }
                this.rootView.paintAll(graphics)
            }
            graphics.finalizeRepaintCycle()
            this.repaintRequested = false
        }

        private fun onResize(x: Short, y: Short, width: UShort, height: UShort) {
            this.x = x
            this.y = y
            this.width = width
            this.height = height
            this.layout()
            this.paint()
        }

        fun layout() {
            if (this.rootView != null) {
                var b = this.border
//                ("border top" + b.top.toString()).println()
//                ("Win size: " + this.width.toString() + " x " + this.height.toString()).println()
                this.rootView.layout(b.left, b.top, this.width - (b.left + b.right).toUShort(), this.height - (b.top + b.bottom).toUShort())
            }
        }

        fun onCloseButtonClick() {
            this.close()
        }

        fun onMouseEvent(type: MouseEventType, button: MouseButton, x: Short, y: Short) {
//            var lx = this.border.left
//            ("Window click: " + button.toString() + " " + x.toString() + " " + y.toString()).println()
            this.rootView?.onMouseEvent(type, button, x - this.border.left, y - this.border.top)
        }

        fun calculateStringWidth(font: Font, text: String): UShort {
            var graphics = this.getGraphics()
            if (font != null) {                
                graphics.setFont(font)
            }
            return graphics.calculateStringWidth(text)
        }

        fun getCurrentFontSize(): UByte {
            var graphics = this.getGraphics()
            if (graphics == null) {
                throw new Exception("Graphics is null")
            }
            return graphics.getCurrentFontSize()
        }

        private fun getGraphics(): ViewContextGraphics  {
            return this.graphics
//            return this.viewContext.getGraphics()
        }

        fun getPixelMetrics(): PixelMetrics {
            if (this.pixelMetrics == null) {
                this.pixelMetrics = new PixelMetrics(this.pixelScaleX, this.pixelScaleY)
            }
            return this.pixelMetrics
        }
/*
        fun getPixelScaleX(): UByte {
            return this.pixelScaleX
        }

        fun getPixelScaleY(): UByte {
            return this.pixelScaleY
        }
*/
        native fun handleInput()
        native fun isOpen(): Bool
        private native fun refresh()

        private native fun open(x: Short, y: Short, width: UShort, height: UShort, screen: Screen, windowManager: WindowManager)
        native fun close()
        fun dispose() {
            this.viewContext = null
            this.graphics = null
        }

        fun getScaledX(x: Short): Short {
            return x * this.pixelScaleX.toShort()            
        }

        fun getScaledY(y: Short): Short {
            return y * this.pixelScaleY.toShort()            
        }

    }
}

