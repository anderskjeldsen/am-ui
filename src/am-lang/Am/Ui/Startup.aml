
namespace Am.Ui 
{

    enum MyEnum<Int> {
        import Am.Lang
        val1 = 1
        val2 = 2
    }

    class MyBase() {
        import Am.Lang

        override fun toString(): String {
            return "base"
        }
    }

    class MyChild() : MyBase {
        import Am.Lang

        override fun toString(): String {
            return "child"
        }

        fun toStringBase(): String {
            return base.toString()
        }
    }

    native class Startup {
        import Am.Lang
        import Am.Threading

        static var xxx: Int = 1

        static fun main() {

            "get xxx".println()
            var yyy = xxx
            "got xxx".println()

            yyy.toString().println()

            "printed xxx".println()

/*
            var list = List<String>.newList<String>()
            each(list, i) {
                i.println()
            }
            */

/*
            "Ui started".println()
            var w = Window.openWindow(150US, 150US, null)

            var b = new Button()
            "button created".println()
            w.setRootView(b)
            "root view set".println()

            Thread.sleep(2000L)           
            */ 
        }        

    }
}

