
namespace Am.Ui 
{

    enum MyEnum<Int> {
        import Am.Lang
        val1 = 1
        val2 = 2
    }

    class MyBase() {
        import Am.Lang

        override fun toString(): String {
            return "base"
        }
    }

    class MyChild() : MyBase {
        import Am.Lang

        override fun toString(): String {
            return "child"
        }

        fun toStringBase(): String {
            return base.toString()
        }
    }

    static fun listFolder(prefix: String, folder: File) {
        var files = folder.listFiles()
        var i = 0
        while(i < files.length()) {
            var f = files[i]
            (prefix + f.filename).println()
            if (f.isDirectory()) {
                Startup.listFolder(prefix + "-", f)
            }
            i++
        }

    }

    class Startup {
        import Am.Lang
        import Am.Threading

        static var xxx: Int = 1

        static fun main() {
            var w = Window.openWindow(20S, 20S, 150US, 150US, null, null)
            var pm = w.getPixelMetrics()

            var folder = new File("ram:")
            Startup.listFolder("", folder)
            
            var panel = new Panel()
            panel.setDefaultBorder()
            panel.setDefaultPadding()
            panel.setMargin(w.getScaledX(2S), w.getScaledY(2S))

            var vStack = new VStack(w.getScaledY(2S))
            panel.setChild(vStack)

            vStack.addChild(new Button("Add label", (v) => {
                vStack.addChild(new Label("Another label"))
                var w2 = w
                w2.layout()
                w2.requestRepaint()
            }).setup((v) => {
                "setup".println()
                v.setDefaultPadding()
                var w2 = w
//                v.setMargin(w2.getScaledX(2S), w2.getScaledY(2S))
                v.growX = 255UB
                v.growY = 0UB
            }))

            var l2 = new Label("Hello")

            l2.setup((v) => {
                v.growX = 255UB
            })

            var hStack = new HStack(5S)

            hStack.addChild(new Label("Hello").setup((v) => {
                v.growX = 255UB
            }))

            hStack.addChild(new Label("World").setup((v) => {
                v.growX = 255UB
            }))

            vStack.addChild(hStack)

            /*
            vStack.addChild(new Label("Hello Amiga").setup((l) => {

            }))
            vStack.addChild(new Button("Remove last label", (v) => {
                "remove last label".println()
            }).setup((v) => {
                v.setDefaultPadding()
                v.growX = 255UB
                v.growY = 128UB
//                v.setPadding(5S)
            }))
*/
            w.setRootView(panel)

            w.layout()
            w.requestRepaint()

            while(w.isOpen()) {
                w.handleInput()
            }
            vStack.removeChildren() // Because the onClick callback of TestButton refers to vStack TODO: turn them into Weak's ?
        }
    }
}

