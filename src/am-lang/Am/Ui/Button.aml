
namespace Am.Ui 
{

    class Button(var text: String, var clickListener: (view: View) => Bool) : View {
        import Am.Lang

        private var label: Label
        private var active: Bool
        private var hovered: Bool

        private var borderPens: BorderPens = new BorderPens(2UB, 2UB, 1UB, 1UB)
        private var activeBorderPens: BorderPens = new BorderPens(1UB, 1UB, 2UB, 2UB)

        override fun setDefaultPadding() {
            this.setPadding(5S)
        }

        override fun setDefaultBorder() {
            this.setBorderWidths(2S, 1S)
        }

        override fun onAttach(viewContext: ViewContext) {
            base.onAttach(viewContext)
            var label = this.ensureLabel()
            label.onAttach(viewContext)
        }

        override fun onDetach() {
            base.onDetach()
            var label = this.ensureLabel()
            label.onDetach()
        }

        private fun ensureLabel(): Label {
            if (this.label == null) {
                this.label = new Label(this.text)
            }
            return this.label
        }

        override fun minHeight(): Short {
            var label = this.ensureLabel()
            var minH = label.minHeight() + this.padding.top + this.padding.bottom + this.margin.top + this.margin.bottom + this.borderWidths.top + this.borderWidths.bottom
            return minH
        }

        override fun minWidth(): Short {
            var label = this.ensureLabel()
            return label.minWidth() + this.padding.left + this.padding.right + this.margin.left + this.margin.right + this.borderWidths.left + this.borderWidths.right
        }

        override fun layout(x: Short, y: Short, width: UShort, height: UShort) {
            base.layout(x, y, width, height)
            var label = this.ensureLabel()
            var lx = ((this.innerWidth() / 2S) - (label.minWidth() / 2S)) + this.margin.left + this.borderWidths.left + this.padding.left
            var ly = ((this.innerHeight() / 2S) - (label.minHeight() / 2S)) + this.margin.top + this.borderWidths.top + this.padding.top
            label.layout(lx, ly, label.minWidth().toUShort(), label.minHeight().toUShort())            
        }

        override fun paint(graphics: Graphics) {
            base.paint(graphics)

            var x1 = 0S
            var x2 = this.width.toShort() - (this.margin.right + this.margin.left + 1S)
            var y1 = 0S
            var y2 = this.height.toShort() - (this.margin.bottom + this.margin.top + 1S)

            var borderPens = this.borderPens
            var bgPen = 0UB
            if (this.active && this.hovered) {
                bgPen = 3UB
                borderPens = this.activeBorderPens
            }

            // Background bl,bt - w-br,h-bb            
            graphics.setForegroundPen(bgPen)
            graphics.fillRect(x1, y1, x2, y2)

            this.paintNativeBorder(graphics, borderPens)

            var label = this.ensureLabel()
            label.backgroundPen = bgPen
            label.paintAll(graphics)
        }

        override fun onMouseEvent(type: MouseEventType, button: MouseButton, x: Short, y: Short): Bool {
//            ("Button click: " + button.toString() + " " + x.toString() + " " + y.toString()).println()

            var wasHovered = this.hovered

            if (this.contains(x, y)) {
                this.hovered = true

                if (type == MouseEventType.up) {
//                    "Mouse up".println()
                    this.active = false
                    this.requestRepaint()

//                ("Button clicked: " + this.text).println()
                    var cl = this.clickListener
                    if (cl != null) {
                        var res = cl(this)                    
                        return res
                    }
                } else if (type == MouseEventType.down) {
//                    "Mouse down".println()
                    this.active = true
                    this.requestRepaint()
                } else if (type == MouseEventType.move) {
//                    ("Mouse move "  + x.toString() + ", " + y.toString()).println()
                    if (!wasHovered) {
                        if (this.active) {
                            this.requestRepaint()
                        }
                    }

                }

            } else {
                this.hovered = false

                if (type == MouseEventType.up) {
                    if (this.active) {
                        this.active = false
                        this.requestRepaint()
                    }
                } else if (wasHovered && this.active) {
                    this.requestRepaint()
                }


            }
            return false
        }



    }
}

