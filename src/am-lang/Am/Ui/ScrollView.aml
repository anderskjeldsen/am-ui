
namespace Am.Ui 
{

    class ScrollView() : View {
        import Am.Lang

        private var child: View
        private var scrollX: Short = 0S
        private var scrollY: Short = 0S

        private var showVertical: Bool
        private var showHorizontal: Bool

        override fun setDefaultPadding() {
            this.setPadding(4S, 2S)
        }

        override fun onAttach(viewContext: ViewContext) {
            base.onAttach(viewContext)
            this.child?.onAttach(viewContext)
        }

        override fun onDetach() {
            base.onDetach()
            this.child?.onDetach()
        }

        override fun minHeight(): Short {
            return 0S
        }

        override fun minWidth(): Short {
            return 0S
        }

        override fun layout(x: Short, y: Short, width: UShort, height: UShort) {
            base.layout(x, y, width, height)
            this.layoutChildren()
        }

        private fun layoutChildren() {
            var x = 0S
            var y = 0S

            var height = this.child.minHeight()
            var width = this.child.minWidth()

            this.child.layout(x, y, width.toUShort(), height.toUShort())
        }


        override fun paintAll(graphics: Graphics) {
            var ix = this.x + this.margin.left
            var iy = this.y + this.margin.top

            var b1 = graphics.shouldRepaintAll()
            var b2 = this.getRepaintRequested()
            if (b1 || b2) {
                graphics.translate(ix, iy)
                this.paint(graphics)
                graphics.translate(-ix, -iy)
            }
            this.markAsPainted()
            if (this.child != null) {
                ix = this.x + this.scrollX
                iy = this.y + this.scrollY

                graphics.translate(ix, iy)
                this.child.paintAll(graphics)
                graphics.translate(-ix, -iy)
            }
        }

        override fun paint(graphics: Graphics) {
            base.paint(graphics)

            var x1 = 0S
            var x2 = this.width.toShort() - (this.margin.right + this.margin.left + 1S)
            var y1 = 0S
            var y2 = this.height.toShort() - (this.margin.bottom + this.margin.top + 1S)

            var bgPen = 0UB

            graphics.setForegroundPen(bgPen)
            graphics.fillRect(x1, y1, x2, y2)
        }

        fun setChild(child: View) {
            this.child = child
        }

        fun getChild(): View {
            return this.child
        }

        override fun onMouseEvent(type: MouseEventType, button: MouseButton, x: Short, y: Short): Bool {
            if (this.contains(x, y)) {
                var c = this.child
                var lx = x - c.x 
                var ly = y - c.y

                var consumed = c.onMouseEvent(type, button, lx, ly)
                if (consumed) {
                    return consumed
                }
            }
            return false
        }

    }
}

