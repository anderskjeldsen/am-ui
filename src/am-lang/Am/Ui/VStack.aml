
namespace Am.Ui 
{
    class VStack(var spacing: Short) : ViewGroup {
        import Am.Lang
        import Am.Collections

        override fun layoutChildren() {
            var left = 0S // this.margin.left + this.padding.left + this.borderWidths.left
            var y = 0S // this.margin.top + this.padding.top + this.borderWidths.top
//            ("First y: " + y.toString()).println()
            var height = this.innerHeight()
            var minHeight = this.innerMinHeight()

//            ("Height: " + height.toString() + " vs inner height: " + minHeight.toString()).println()

            var unusedHeight = Short.max(height - minHeight, 0S)
            var remainingHeight = unusedHeight            

            var sumGrowY = this.sumGrowY()

            var innerWidth = this.innerWidth()

            each(this.children, c) {
                var ch = c.minHeight() + ((c.growY.toInt() * unusedHeight.toInt()) / sumGrowY.toInt()).toShort()
                c.layout(left, y, innerWidth.toUShort(), ch.toUShort())
                y = y + ch + this.spacing
            }
        }

        fun innerMinHeight(): Short {
            var h = 0S
            each(this.children, c) {
                if (h > 0S) {
                    h = h + this.spacing
                }
                h = h + c.minHeight()
            }
            return h
        }

        override fun minHeight(): Short {
            return this.innerMinHeight() + this.padding.top + this.padding.bottom + this.margin.top + this.margin.bottom + this.borderWidths.top + this.borderWidths.bottom
        }

        fun innerMinWidth(): Short {
            var minW = 0S
            each(this.children, c) {
                var cMinW = c.minWidth()
                if (cMinW > minW) {
                    minW = cMinW
                }
            }
            return minW
        }

        override fun minWidth(): Short {
            return this.innerMinWidth() + this.padding.left + this.padding.right + this.margin.left + this.margin.right + this.borderWidths.left + this.borderWidths.right
        }

        fun sumGrowY(): Short {
            var grow = 0S
            each(this.children, c) {
                grow = grow + c.growY.toShort()
            }
            if (grow == 0) {
                grow = 1S
            }
            return grow
        }

    }


}

