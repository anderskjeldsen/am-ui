
namespace Am.Ui 
{

    class View {
        import Am.Lang
        private var viewContext: ViewContext
        var x: Short
        var y: Short
        var width: UShort
        var height: UShort
        var padding: Insets = new Insets(0S, 0S, 0S, 0S)
        var margin: Insets = new Insets(0S, 0S, 0S, 0S)
        var borderWidths: Insets = new Insets(0S, 0S, 0S, 0S)
//        var borderPens: BorderPens
        var growX: UByte
        var growY: UByte
        private var repaintRequested: Bool = false

        fun getRepaintRequested(): Bool {
            return this.repaintRequested
        }

        fun minWidth(): Short {
            return this.margin.left + this.margin.right + this.padding.left + this.padding.right + this.borderWidths.left + this.borderWidths.right
        }

        fun minHeight(): Short {
            return this.margin.top + this.margin.bottom + this.padding.top + this.padding.bottom + this.borderWidths.top + this.borderWidths.bottom
        }

/*
        fun growX(): UByte {
            return 0UB
        }

        fun growY(): UByte {
            return 0UB
        }
*/

        // Where is the actual content, inside the margin+border+padding
        fun innerX(): Short {
            return this.x + this.margin.left + this.padding.left + this.borderWidths.left
//            return this.padding.left
        }

        fun innerY(): Short {
            return this.y + this.margin.top + this.padding.top + this.borderWidths.top
//            return this.padding.top
        }

        fun innerWidth(): Short {
            return this.width.toShort() - (this.margin.left + this.margin.right + this.padding.left + this.padding.right + this.borderWidths.left + this.borderWidths.right)
        }

        fun innerHeight(): Short {
            return this.height.toShort() - (this.margin.top + this.margin.bottom + this.padding.top + this.padding.bottom + this.borderWidths.top + this.borderWidths.bottom)
        }

        fun setDefaultPadding() {
            this.setPadding(0S)
        }

        fun setDefaultBorder() {
            this.setBorderWidths(0S)
        }

        fun setPadding(padding: Short) {
            this.padding.left = padding
            this.padding.top = padding
            this.padding.right = padding
            this.padding.bottom = padding
        }

        fun setPadding(horizontal: Short, vertical: Short) {
            this.padding.left = horizontal
            this.padding.top = vertical
            this.padding.right = horizontal
            this.padding.bottom = vertical
        }

        fun setMargin(margin: Short) {
            this.margin.left = margin
            this.margin.top = margin
            this.margin.right = margin
            this.margin.bottom = margin
        }

        fun setMargin(horizontal: Short, vertical: Short) {
            this.margin.left = horizontal
            this.margin.top = vertical
            this.margin.right = horizontal
            this.margin.bottom = vertical
        }

        fun setBorderWidths(width: Short) {
            this.borderWidths.left = width
            this.borderWidths.top = width
            this.borderWidths.right = width
            this.borderWidths.bottom = width
        }

        fun setBorderWidths(horizontal: Short, vertical: Short) {
            this.borderWidths.left = horizontal
            this.borderWidths.top = vertical
            this.borderWidths.right = horizontal
            this.borderWidths.bottom = vertical
        }

        fun getViewContext(): ViewContext {
            return this.viewContext
        }

        fun getWindow(): Window {
            return this.viewContext.getWindow()
        }

        fun onAttach(viewContext: ViewContext) {
            if (this.viewContext != null) {
                throw new Exception("View already attached")
            }
            this.viewContext = viewContext
        }

        fun onDetach() {
            this.viewContext = null
        }

        fun paint(graphics: Graphics) {

        }

        fun paintAll(graphics: Graphics) {
            var b1 = graphics.shouldRepaintAll()
            var b2 = this.getRepaintRequested()
            if (b1 || b2) {
                var ix = this.x + this.margin.left
                var iy = this.y + this.margin.top

//                ("Translate " + ix.toString() + "," + iy.toString()).println()

                graphics.translate(ix, iy)
                this.paint(graphics)
                this.markAsPainted()
                graphics.translate(-ix, -iy)
            }
        }

        fun markAsPainted() {
            this.repaintRequested = false
        }

        fun requestRepaint() {
            var b = this.repaintRequested
            if (!b) {
                this.repaintRequested = true
                this.viewContext.getWindow().requestRepaint()
            }
        }

        fun layout(x: Short, y: Short, width: UShort, height: UShort) {
            this.x = x
            this.y = y
            this.width = width
            this.height = height
//            ("Layout xyz" + x.toString() + "," + y.toString() + "," + width.toString() + "," + height.toString()).println()
        }

        fun paintBorder(graphics: Graphics, borderPens: BorderPens) {
            var x1 = 0S
            var y1 = 0S
            var x2 = this.width.toShort() - (this.margin.right + this.margin.left + 1S)
            var y2 = this.height.toShort() - (this.margin.bottom + this.margin.top + 1S)

            graphics.setForegroundPen(borderPens.top)
            graphics.fillRect(x1, y1, x2, y1 + this.borderWidths.top)

            graphics.setForegroundPen(borderPens.left)
            graphics.fillRect(x1, y1, x1 + this.borderWidths.left, y2)

            graphics.setForegroundPen(borderPens.right)
            graphics.fillRect(x2 - this.borderWidths.right, y1, x2, y2)

            graphics.setForegroundPen(borderPens.bottom)
            graphics.fillRect(x1, y2 - this.borderWidths.bottom, x2, y2)
        }

        fun paintNativeBorder(graphics: Graphics, borderPens: BorderPens) {
            var x1 = 0S
            var y1 = 0S
            var x2 = this.width.toShort() - (this.margin.right + this.margin.left + 1S)
            var y2 = this.height.toShort() - (this.margin.bottom + this.margin.top + 1S)

            graphics.setForegroundPen(borderPens.top)
            graphics.drawLine(x1, y1, x2 - 1S, y1)

            graphics.setForegroundPen(borderPens.left)
            graphics.drawLine(x1, y1, x1, y2)
            graphics.drawLine(x1 + 1S, y1, x1 + 1S, y2 - 1S)

            graphics.setForegroundPen(borderPens.right)
            graphics.drawLine(x2, y1, x2, y2)
            graphics.drawLine(x2 - 1S, y1 + 1S, x2 - 1S, y2)

            graphics.setForegroundPen(borderPens.bottom)
            graphics.drawLine(x1 + 1S, y2, x2, y2)
        }

        fun contains(x: Short, y: Short): Bool {
//            ("contains " + x.toString() + "," + y.toString() + " in " + this.width.toString() + ", " + this.height.toString()).println()

            return ((x >= 0S) && (x < this.width) && (y >= 0S) && (y < this.height))
        }

        fun findViewAt(x: Short, y: Short): View {
            if (this.contains(x, y)) {
                return this
            }
            return null
        }

        // returns true if consumed
        fun onMouseEvent(type: MouseEventType, button: MouseButton, x: Short, y: Short): Bool {
            if (this.contains(x, y)) {
                return true
            }
            return false
        }

        fun setup(i: (it: View) => View) : View {
            i(this)
            return this
        }

    }



}

