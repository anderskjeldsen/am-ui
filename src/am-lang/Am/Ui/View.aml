
namespace Am.Ui 
{
    class Graphics {
        import Am.Lang
        var xOffset: Short
        var yOffset: Short

        fun translate(x: Short, y: Short) {
            this.xOffset = this.xOffset + x
            this.yOffset = this.yOffset + y
        }

        abstract fun setForegroundPen(pen: UByte)
        abstract fun drawLine(x: Short, y: Short, x2: Short, y2: Short)
    }

    interface ViewContext {
//        private var window: Window
//private var window: Window
        fun getWindow(): Window

        // Keep information about Window/Screen/Gadget Context etc.
    }

    native class ViewContextGraphics(var viewContext: ViewContext) : Graphics {
        import Am.Lang
        native override fun setForegroundPen(pen: UByte)
        native override fun drawLine(x: Short, y: Short, x2: Short, y2: Short)
    }


    class ViewContextImpl : ViewContext {
        import Am.Lang

        private var windowRef: Weak<Window> = new Weak<Window>()

        fun getWindow(): Window {
            return this.windowRef.get()
        }

        fun setWindow(window: Window) {
            this.windowRef.set(window)
        }
    }

    class View {
        import Am.Lang
        private var viewContext: ViewContext
        var x: Short
        var y: Short
        var width: Short
        var height: Short

        fun getViewContext(): ViewContext {
            return this.viewContext
        }

        fun onAttach(viewContext: ViewContext) {
            if (this.viewContext != null) {
                throw new Exception("View already attached")
            }
            this.viewContext = viewContext
        }

        fun onDetach() {
            this.viewContext = null
        }

        fun paint(graphics: Graphics) {

        }

        fun paintAll(graphics: Graphics) {
            this.paint(graphics)
        }
    }

    class ViewGroup : View {
        import Am.Lang
        import Am.Collections

        private var children: List<View> = List<View>.newList<View>()
        
        var font: Font

        fun getChildren() {
            return this.children
        }

        fun addChild(view: View) {
            this.children.add(view)
            if (this.viewContext != null) {
                view.onAttach(this.viewContext)
            }
        }

        fun removeChild(view: View) {
            this.children.remove(view)
            view.onDetach()
        }

        fun paintChildren(graphics: Graphics) {
            var i = 0
            var cl = this.children
            while(i < cl.size) {
                var c = cl.get(i)
                c.paintAll(graphics)
                i++
            }
        }

        override fun paintAll(graphics: Graphics) {
            graphics.translate(this.x, this.y)
            this.paint(graphics)
            this.paintChildren(graphics)
            graphics.translate(-this.x, -this.y)
        }

        fun layoutChildren() {

        }
    }

    class Font(private var name: String) {
        import Am.Lang

        fun getName(): String {
            return this.name
        }
    }

    class GadgetView : View {
        import Am.Lang
    }

    native class Button : GadgetView {
        import Am.Lang

        private native fun attachButton(window: Window)
        private native fun detachButton(window: Window)

        override fun onAttach(viewContext: ViewContext) {
            base.onAttach(viewContext)
            "attachButton...".println()
            this.attachButton(viewContext.getWindow())
            "attachButton...done".println()
        }

        override fun onDetach() {
            this.detachButton(this.viewContext.getWindow())
            base.onDetach()
        }
    }

    class TestButton : View {
        import Am.Lang

        override fun paint(graphics: Graphics) {
            base.paint(graphics)

            graphics.setForegroundPen(1UB)
            graphics.drawLine(0S, 0S, this.width, this.height)
        }

    }
}

